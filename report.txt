You should provide a description of your protocol design. It should include a list of the
commands, what they do and the rationale behind each design decision. You should also
write pseudocode that describes how your server will handle the various commands, in
what order, etc.

Protocol Overview

There are two parts for this protocol to run, the server and the client. Once the server is up and running, a client is able to join and connect to the server.
Mulitple clients can join the server at the same time. Upon connection the user is prompted with a welcome and a message adivising the user to register their name 
with the server, so that they may be able to use the messaging system. They can alternatively use HELP or QUIT commands too, as they do not need to register 
to use these commands. Once the user registers using a valid username they are welcomed and can use other commands in the system. The user is able to communicate 
with other users who are also connected to the server, either through private message or messaing all users at once. 

This works with the client side taking the user's input and sending it over to the server. The server is then responsible for processing any commands but also 
ensures that the user has entered valid input. The server will validate each command to check for specific parameters and will send a message back to the user
if incorrect input has been given. The server also keeps a server log of all requests on the system, including user commands, the number of clients connected, 
new users who register, and when a user disconnects. Through this design the server controls and processes almost everything and is able to give sensible output
back to the user based on what has been inputted.

After all clients are done using the system they can QUIT using the command and exit. The server will acknowledge when each client is disconnected and once all
users have quit, the server will remain active, in case anyone else joins again


Design decision

One key design decision I made was allowing only certain commands available to users who have not registered. I decided it seemed user friendly to allow users to 
be able to access HELP/HELPLIST to see available commands or information about them. This made sense as a new user may not be familiar with the commands so 
it would be useful for them to understand more of how the system works before registering a user name.

Validation

Command list

'REGISTER'   -> Register new user" 
'MESSAGEALL' -> Send message to all active users on system"
'MESSAGE'    -> Send direct message to specified user"
'ALLUSERS'   -> Displays list of all active users"
'HELPLIST'   -> Displays list of all commands and how to use them"
'HELP'       -> Information about commands"

Command order




# Psuedocode for server methods

function onStart():
    # Initialise server variables 
    SET userCount = 0
    SET users = {}
    OUTPUT "Server started"

function onMessage(socket, message)

    # Split input to get command and parameter
    command, parameter = message.split()

    # Call register function
    IF command == "REGISTER"
        VALIDATE user not registered yet
        name = parameter
        CALL onRegister(name)

    # Help and quit commands are available to users before registering
    ELIF command == "HELP"
        OUTPUT commandsInfo
    
    ELIF command == "HELPLIST"
        OUTPUT commandslist

    ELIF command == "QUIT"
        OUTPUT "Quitting program"
        CALL onDisconnect()

    # User should register before using certain commands 
    # Messaging specific or all users needs registering
    IF (command != "REGISTER" OR "HELP" OR "HELPLIST" OR "QUIT") AND name == NULL
        OUTPUT "Please register first!!"
    
    ELIF command == "MESSAGEALL"
        message = parameter
        for user in userlist
            user.send(message)

    ELIF command == "MESSAGE"
        user, message = parameter.split()
        user.send(message)

    ELIF command == "ALLUSERS"
        for user in userlist 
            OUTPUT user.name

    ELIF command == "CHECK"
        IF user in userlist 
            OUTPUT "User is active"  
        ELSE
            OUTPUT "User is not active"

    ELSE
        OUTPUT "invalid command, try HELP"

function onConnect()
    SET name = NULL
    INCREMENT userCount
    OUTPUT "Connected"
    OUTPUT userCount

function onDisconnect()
    userlist.remove(name)
    DECREMENT userCount
    OUTPUT "Disconnected"
    OUTPUT userCount

# For register add new user name to user list
# Name is stored with socket
function onRegister(name)
    VALIDATE name is one word
    VALIDATE name does not already exist
    userlist[name] = socket